
# Recommendation for Your Case
# Go with Option 1 - it's the least disruptive:

# Split your current docker-stack-deploy.yml into two files:

# traefik-only-stack.yml (Traefik + network + volumes)
# app-only-stack.yml (Your web + db services)
# Deploy both in the same GitHub Action (two steps)

# Future apps can reference shared-traefik_webnet network

# This way:

# ✅ No new repos
# ✅ No additional CI/CD complexity
# ✅ Traefik is shared but managed from your main app
# ✅ Other apps can easily join the network


services:

  db:
    image: postgres
    user: postgres
    volumes:
      - db-data:/var/lib/postgresql/data
    networks:
      - webnet
    secrets:
      - db-password
    environment:
      - POSTGRES_DB=app
      - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
    healthcheck:
      test: [ "CMD", "pg_isready" ]
      interval: 10s
      timeout: 5s
      retries: 5

  web:
    image: ghcr.io/blakexyz/ham-test-gitactions-test:${GIT_COMMIT_HASH:-latest}
    labels:
      - "traefik.enable=true"
      - "traefik.http.services.web.loadbalancer.server.port=5000"
      - "traefik.http.routers.web.rule=Host(`hamburgersvshotdogs.com`)"
      - "traefik.http.routers.web.entrypoints=websecure"
      - "traefik.http.routers.web.tls.certresolver=myresolver"
    networks: 
      - webnet
    secrets:
      - db-password
    environment:
      - POSTGRES_HOST=db
      - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
      - POSTGRES_USER=postgres
      - POSTGRES_DB=app
      - POSTGRES_PORT=5432
      - POSTGRES_SSLMODE=disable
      - FLASK_ENV=production
      - SECRET_KEY=your-very-secret-key
      - SEND_FILE_MAX_AGE_DEFAULT=31556926
      - BCRYPT_LOG_ROUNDS=13
      - FLASK_DEBUG=0
      - LOG_LEVEL=info
      - GUNICORN_WORKERS=4
    deploy:
      update_config:
        parallelism: 1              # Update one container at a time
        delay: 10s                  # Wait between updates
        failure_action: rollback    # Rollback on failure
        order: start-first             # Stop old containers BEFORE starting new ones
      # depends_on: # Doesnt work in Swarm mode, use healthchecks instead
      #   - db



  # #connect to: http://{ip_address}:8081
  # to remove, run: - docker service rm ham-stack-deploy_pgadmin
  # pgadmin:
  #   image: dpage/pgadmin4
  #   environment:
  #     - PGADMIN_DEFAULT_EMAIL=artificialblakek@gmail.com
  #   secrets:
  #     - pgadmin-password
  #   entrypoint: ["/bin/sh", "-c", "export PGADMIN_DEFAULT_PASSWORD=$$(cat /run/secrets/pgadmin-password) && exec /entrypoint.sh"]
  #   depends_on:
  #     - web
  #   ports:
  #     - "8081:80"
  #   networks:
  #     - webnet

volumes:
  db-data:

secrets:
  db-password:
    external: true
  pgadmin-password:
    external: true

networks:
  webnet:
    external: true # References the shared network created by the Traefik stack
    name: traefik-deploy_webnet  # {stack name}_{network name}
